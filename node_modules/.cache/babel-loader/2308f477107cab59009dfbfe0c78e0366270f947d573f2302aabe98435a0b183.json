{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tinycolor = exports.TinyColor = void 0;\nvar conversion_1 = require(\"./conversion\");\nvar css_color_names_1 = require(\"./css-color-names\");\nvar format_input_1 = require(\"./format-input\");\nvar util_1 = require(\"./util\");\nvar TinyColor = /** @class */function () {\n  function TinyColor(color, opts) {\n    if (color === void 0) {\n      color = '';\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _a;\n    // If input is already a tinycolor, return itself\n    if (color instanceof TinyColor) {\n      // eslint-disable-next-line no-constructor-return\n      return color;\n    }\n    if (typeof color === 'number') {\n      color = (0, conversion_1.numberInputToObject)(color);\n    }\n    this.originalInput = color;\n    var rgb = (0, format_input_1.inputToRGB)(color);\n    this.originalInput = color;\n    this.r = rgb.r;\n    this.g = rgb.g;\n    this.b = rgb.b;\n    this.a = rgb.a;\n    this.roundA = Math.round(100 * this.a) / 100;\n    this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n    this.gradientType = opts.gradientType;\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this.r < 1) {\n      this.r = Math.round(this.r);\n    }\n    if (this.g < 1) {\n      this.g = Math.round(this.g);\n    }\n    if (this.b < 1) {\n      this.b = Math.round(this.b);\n    }\n    this.isValid = rgb.ok;\n  }\n  TinyColor.prototype.isDark = function () {\n    return this.getBrightness() < 128;\n  };\n  TinyColor.prototype.isLight = function () {\n    return !this.isDark();\n  };\n  /**\n   * Returns the perceived brightness of the color, from 0-255.\n   */\n  TinyColor.prototype.getBrightness = function () {\n    // http://www.w3.org/TR/AERT#color-contrast\n    var rgb = this.toRgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n  };\n  /**\n   * Returns the perceived luminance of a color, from 0-1.\n   */\n  TinyColor.prototype.getLuminance = function () {\n    // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    var rgb = this.toRgb();\n    var R;\n    var G;\n    var B;\n    var RsRGB = rgb.r / 255;\n    var GsRGB = rgb.g / 255;\n    var BsRGB = rgb.b / 255;\n    if (RsRGB <= 0.03928) {\n      R = RsRGB / 12.92;\n    } else {\n      // eslint-disable-next-line prefer-exponentiation-operator\n      R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n    }\n    if (GsRGB <= 0.03928) {\n      G = GsRGB / 12.92;\n    } else {\n      // eslint-disable-next-line prefer-exponentiation-operator\n      G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n    }\n    if (BsRGB <= 0.03928) {\n      B = BsRGB / 12.92;\n    } else {\n      // eslint-disable-next-line prefer-exponentiation-operator\n      B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n    }\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  };\n  /**\n   * Returns the alpha value of a color, from 0-1.\n   */\n  TinyColor.prototype.getAlpha = function () {\n    return this.a;\n  };\n  /**\n   * Sets the alpha value on the current color.\n   *\n   * @param alpha - The new alpha value. The accepted range is 0-1.\n   */\n  TinyColor.prototype.setAlpha = function (alpha) {\n    this.a = (0, util_1.boundAlpha)(alpha);\n    this.roundA = Math.round(100 * this.a) / 100;\n    return this;\n  };\n  /**\n   * Returns whether the color is monochrome.\n   */\n  TinyColor.prototype.isMonochrome = function () {\n    var s = this.toHsl().s;\n    return s === 0;\n  };\n  /**\n   * Returns the object as a HSVA object.\n   */\n  TinyColor.prototype.toHsv = function () {\n    var hsv = (0, conversion_1.rgbToHsv)(this.r, this.g, this.b);\n    return {\n      h: hsv.h * 360,\n      s: hsv.s,\n      v: hsv.v,\n      a: this.a\n    };\n  };\n  /**\n   * Returns the hsva values interpolated into a string with the following format:\n   * \"hsva(xxx, xxx, xxx, xx)\".\n   */\n  TinyColor.prototype.toHsvString = function () {\n    var hsv = (0, conversion_1.rgbToHsv)(this.r, this.g, this.b);\n    var h = Math.round(hsv.h * 360);\n    var s = Math.round(hsv.s * 100);\n    var v = Math.round(hsv.v * 100);\n    return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\n  };\n  /**\n   * Returns the object as a HSLA object.\n   */\n  TinyColor.prototype.toHsl = function () {\n    var hsl = (0, conversion_1.rgbToHsl)(this.r, this.g, this.b);\n    return {\n      h: hsl.h * 360,\n      s: hsl.s,\n      l: hsl.l,\n      a: this.a\n    };\n  };\n  /**\n   * Returns the hsla values interpolated into a string with the following format:\n   * \"hsla(xxx, xxx, xxx, xx)\".\n   */\n  TinyColor.prototype.toHslString = function () {\n    var hsl = (0, conversion_1.rgbToHsl)(this.r, this.g, this.b);\n    var h = Math.round(hsl.h * 360);\n    var s = Math.round(hsl.s * 100);\n    var l = Math.round(hsl.l * 100);\n    return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\n  };\n  /**\n   * Returns the hex value of the color.\n   * @param allow3Char will shorten hex value to 3 char if possible\n   */\n  TinyColor.prototype.toHex = function (allow3Char) {\n    if (allow3Char === void 0) {\n      allow3Char = false;\n    }\n    return (0, conversion_1.rgbToHex)(this.r, this.g, this.b, allow3Char);\n  };\n  /**\n   * Returns the hex value of the color -with a # prefixed.\n   * @param allow3Char will shorten hex value to 3 char if possible\n   */\n  TinyColor.prototype.toHexString = function (allow3Char) {\n    if (allow3Char === void 0) {\n      allow3Char = false;\n    }\n    return '#' + this.toHex(allow3Char);\n  };\n  /**\n   * Returns the hex 8 value of the color.\n   * @param allow4Char will shorten hex value to 4 char if possible\n   */\n  TinyColor.prototype.toHex8 = function (allow4Char) {\n    if (allow4Char === void 0) {\n      allow4Char = false;\n    }\n    return (0, conversion_1.rgbaToHex)(this.r, this.g, this.b, this.a, allow4Char);\n  };\n  /**\n   * Returns the hex 8 value of the color -with a # prefixed.\n   * @param allow4Char will shorten hex value to 4 char if possible\n   */\n  TinyColor.prototype.toHex8String = function (allow4Char) {\n    if (allow4Char === void 0) {\n      allow4Char = false;\n    }\n    return '#' + this.toHex8(allow4Char);\n  };\n  /**\n   * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.\n   * @param allowShortChar will shorten hex value to 3 or 4 char if possible\n   */\n  TinyColor.prototype.toHexShortString = function (allowShortChar) {\n    if (allowShortChar === void 0) {\n      allowShortChar = false;\n    }\n    return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);\n  };\n  /**\n   * Returns the object as a RGBA object.\n   */\n  TinyColor.prototype.toRgb = function () {\n    return {\n      r: Math.round(this.r),\n      g: Math.round(this.g),\n      b: Math.round(this.b),\n      a: this.a\n    };\n  };\n  /**\n   * Returns the RGBA values interpolated into a string with the following format:\n   * \"RGBA(xxx, xxx, xxx, xx)\".\n   */\n  TinyColor.prototype.toRgbString = function () {\n    var r = Math.round(this.r);\n    var g = Math.round(this.g);\n    var b = Math.round(this.b);\n    return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\n  };\n  /**\n   * Returns the object as a RGBA object.\n   */\n  TinyColor.prototype.toPercentageRgb = function () {\n    var fmt = function (x) {\n      return \"\".concat(Math.round((0, util_1.bound01)(x, 255) * 100), \"%\");\n    };\n    return {\n      r: fmt(this.r),\n      g: fmt(this.g),\n      b: fmt(this.b),\n      a: this.a\n    };\n  };\n  /**\n   * Returns the RGBA relative values interpolated into a string\n   */\n  TinyColor.prototype.toPercentageRgbString = function () {\n    var rnd = function (x) {\n      return Math.round((0, util_1.bound01)(x, 255) * 100);\n    };\n    return this.a === 1 ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\") : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\n  };\n  /**\n   * The 'real' name of the color -if there is one.\n   */\n  TinyColor.prototype.toName = function () {\n    if (this.a === 0) {\n      return 'transparent';\n    }\n    if (this.a < 1) {\n      return false;\n    }\n    var hex = '#' + (0, conversion_1.rgbToHex)(this.r, this.g, this.b, false);\n    for (var _i = 0, _a = Object.entries(css_color_names_1.names); _i < _a.length; _i++) {\n      var _b = _a[_i],\n        key = _b[0],\n        value = _b[1];\n      if (hex === value) {\n        return key;\n      }\n    }\n    return false;\n  };\n  TinyColor.prototype.toString = function (format) {\n    var formatSet = Boolean(format);\n    format = format !== null && format !== void 0 ? format : this.format;\n    var formattedString = false;\n    var hasAlpha = this.a < 1 && this.a >= 0;\n    var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n    if (needsAlphaFormat) {\n      // Special case for \"transparent\", all other non-alpha formats\n      // will return rgba when there is transparency.\n      if (format === 'name' && this.a === 0) {\n        return this.toName();\n      }\n      return this.toRgbString();\n    }\n    if (format === 'rgb') {\n      formattedString = this.toRgbString();\n    }\n    if (format === 'prgb') {\n      formattedString = this.toPercentageRgbString();\n    }\n    if (format === 'hex' || format === 'hex6') {\n      formattedString = this.toHexString();\n    }\n    if (format === 'hex3') {\n      formattedString = this.toHexString(true);\n    }\n    if (format === 'hex4') {\n      formattedString = this.toHex8String(true);\n    }\n    if (format === 'hex8') {\n      formattedString = this.toHex8String();\n    }\n    if (format === 'name') {\n      formattedString = this.toName();\n    }\n    if (format === 'hsl') {\n      formattedString = this.toHslString();\n    }\n    if (format === 'hsv') {\n      formattedString = this.toHsvString();\n    }\n    return formattedString || this.toHexString();\n  };\n  TinyColor.prototype.toNumber = function () {\n    return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n  };\n  TinyColor.prototype.clone = function () {\n    return new TinyColor(this.toString());\n  };\n  /**\n   * Lighten the color a given amount. Providing 100 will always return white.\n   * @param amount - valid between 1-100\n   */\n  TinyColor.prototype.lighten = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n    var hsl = this.toHsl();\n    hsl.l += amount / 100;\n    hsl.l = (0, util_1.clamp01)(hsl.l);\n    return new TinyColor(hsl);\n  };\n  /**\n   * Brighten the color a given amount, from 0 to 100.\n   * @param amount - valid between 1-100\n   */\n  TinyColor.prototype.brighten = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n    var rgb = this.toRgb();\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return new TinyColor(rgb);\n  };\n  /**\n   * Darken the color a given amount, from 0 to 100.\n   * Providing 100 will always return black.\n   * @param amount - valid between 1-100\n   */\n  TinyColor.prototype.darken = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n    var hsl = this.toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = (0, util_1.clamp01)(hsl.l);\n    return new TinyColor(hsl);\n  };\n  /**\n   * Mix the color with pure white, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return white.\n   * @param amount - valid between 1-100\n   */\n  TinyColor.prototype.tint = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n    return this.mix('white', amount);\n  };\n  /**\n   * Mix the color with pure black, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return black.\n   * @param amount - valid between 1-100\n   */\n  TinyColor.prototype.shade = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n    return this.mix('black', amount);\n  };\n  /**\n   * Desaturate the color a given amount, from 0 to 100.\n   * Providing 100 will is the same as calling greyscale\n   * @param amount - valid between 1-100\n   */\n  TinyColor.prototype.desaturate = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n    var hsl = this.toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = (0, util_1.clamp01)(hsl.s);\n    return new TinyColor(hsl);\n  };\n  /**\n   * Saturate the color a given amount, from 0 to 100.\n   * @param amount - valid between 1-100\n   */\n  TinyColor.prototype.saturate = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n    var hsl = this.toHsl();\n    hsl.s += amount / 100;\n    hsl.s = (0, util_1.clamp01)(hsl.s);\n    return new TinyColor(hsl);\n  };\n  /**\n   * Completely desaturates a color into greyscale.\n   * Same as calling `desaturate(100)`\n   */\n  TinyColor.prototype.greyscale = function () {\n    return this.desaturate(100);\n  };\n  /**\n   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n   * Values outside of this range will be wrapped into this range.\n   */\n  TinyColor.prototype.spin = function (amount) {\n    var hsl = this.toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return new TinyColor(hsl);\n  };\n  /**\n   * Mix the current color a given amount with another color, from 0 to 100.\n   * 0 means no mixing (return current color).\n   */\n  TinyColor.prototype.mix = function (color, amount) {\n    if (amount === void 0) {\n      amount = 50;\n    }\n    var rgb1 = this.toRgb();\n    var rgb2 = new TinyColor(color).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return new TinyColor(rgba);\n  };\n  TinyColor.prototype.analogous = function (results, slices) {\n    if (results === void 0) {\n      results = 6;\n    }\n    if (slices === void 0) {\n      slices = 30;\n    }\n    var hsl = this.toHsl();\n    var part = 360 / slices;\n    var ret = [this];\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(new TinyColor(hsl));\n    }\n    return ret;\n  };\n  /**\n   * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n   */\n  TinyColor.prototype.complement = function () {\n    var hsl = this.toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return new TinyColor(hsl);\n  };\n  TinyColor.prototype.monochromatic = function (results) {\n    if (results === void 0) {\n      results = 6;\n    }\n    var hsv = this.toHsv();\n    var h = hsv.h;\n    var s = hsv.s;\n    var v = hsv.v;\n    var res = [];\n    var modification = 1 / results;\n    while (results--) {\n      res.push(new TinyColor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n    return res;\n  };\n  TinyColor.prototype.splitcomplement = function () {\n    var hsl = this.toHsl();\n    var h = hsl.h;\n    return [this, new TinyColor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), new TinyColor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  };\n  /**\n   * Compute how the color would appear on a background\n   */\n  TinyColor.prototype.onBackground = function (background) {\n    var fg = this.toRgb();\n    var bg = new TinyColor(background).toRgb();\n    var alpha = fg.a + bg.a * (1 - fg.a);\n    return new TinyColor({\n      r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,\n      g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,\n      b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,\n      a: alpha\n    });\n  };\n  /**\n   * Alias for `polyad(3)`\n   */\n  TinyColor.prototype.triad = function () {\n    return this.polyad(3);\n  };\n  /**\n   * Alias for `polyad(4)`\n   */\n  TinyColor.prototype.tetrad = function () {\n    return this.polyad(4);\n  };\n  /**\n   * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n   * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n   */\n  TinyColor.prototype.polyad = function (n) {\n    var hsl = this.toHsl();\n    var h = hsl.h;\n    var result = [this];\n    var increment = 360 / n;\n    for (var i = 1; i < n; i++) {\n      result.push(new TinyColor({\n        h: (h + i * increment) % 360,\n        s: hsl.s,\n        l: hsl.l\n      }));\n    }\n    return result;\n  };\n  /**\n   * compare color vs current color\n   */\n  TinyColor.prototype.equals = function (color) {\n    return this.toRgbString() === new TinyColor(color).toRgbString();\n  };\n  return TinyColor;\n}();\nexports.TinyColor = TinyColor;\n// kept for backwards compatability with v1\nfunction tinycolor(color, opts) {\n  if (color === void 0) {\n    color = '';\n  }\n  if (opts === void 0) {\n    opts = {};\n  }\n  return new TinyColor(color, opts);\n}\nexports.tinycolor = tinycolor;","map":{"version":3,"names":["Object","defineProperty","exports","value","tinycolor","TinyColor","conversion_1","require","css_color_names_1","format_input_1","util_1","color","opts","_a","numberInputToObject","originalInput","rgb","inputToRGB","r","g","b","a","roundA","Math","round","format","gradientType","isValid","ok","prototype","isDark","getBrightness","isLight","toRgb","getLuminance","R","G","B","RsRGB","GsRGB","BsRGB","pow","getAlpha","setAlpha","alpha","boundAlpha","isMonochrome","s","toHsl","toHsv","hsv","rgbToHsv","h","v","toHsvString","concat","hsl","rgbToHsl","l","toHslString","toHex","allow3Char","rgbToHex","toHexString","toHex8","allow4Char","rgbaToHex","toHex8String","toHexShortString","allowShortChar","toRgbString","toPercentageRgb","fmt","x","bound01","toPercentageRgbString","rnd","toName","hex","_i","entries","names","length","_b","key","toString","formatSet","Boolean","formattedString","hasAlpha","needsAlphaFormat","startsWith","toNumber","clone","lighten","amount","clamp01","brighten","max","min","darken","tint","mix","shade","desaturate","saturate","greyscale","spin","hue","rgb1","rgb2","p","rgba","analogous","results","slices","part","ret","push","complement","monochromatic","res","modification","splitcomplement","onBackground","background","fg","bg","triad","polyad","tetrad","n","result","increment","i","equals"],"sources":["/Users/nicklashbrook/coding/chat-react/node_modules/@ctrl/tinycolor/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tinycolor = exports.TinyColor = void 0;\nvar conversion_1 = require(\"./conversion\");\nvar css_color_names_1 = require(\"./css-color-names\");\nvar format_input_1 = require(\"./format-input\");\nvar util_1 = require(\"./util\");\nvar TinyColor = /** @class */ (function () {\n    function TinyColor(color, opts) {\n        if (color === void 0) { color = ''; }\n        if (opts === void 0) { opts = {}; }\n        var _a;\n        // If input is already a tinycolor, return itself\n        if (color instanceof TinyColor) {\n            // eslint-disable-next-line no-constructor-return\n            return color;\n        }\n        if (typeof color === 'number') {\n            color = (0, conversion_1.numberInputToObject)(color);\n        }\n        this.originalInput = color;\n        var rgb = (0, format_input_1.inputToRGB)(color);\n        this.originalInput = color;\n        this.r = rgb.r;\n        this.g = rgb.g;\n        this.b = rgb.b;\n        this.a = rgb.a;\n        this.roundA = Math.round(100 * this.a) / 100;\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n        this.gradientType = opts.gradientType;\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this.r < 1) {\n            this.r = Math.round(this.r);\n        }\n        if (this.g < 1) {\n            this.g = Math.round(this.g);\n        }\n        if (this.b < 1) {\n            this.b = Math.round(this.b);\n        }\n        this.isValid = rgb.ok;\n    }\n    TinyColor.prototype.isDark = function () {\n        return this.getBrightness() < 128;\n    };\n    TinyColor.prototype.isLight = function () {\n        return !this.isDark();\n    };\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     */\n    TinyColor.prototype.getBrightness = function () {\n        // http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    };\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     */\n    TinyColor.prototype.getLuminance = function () {\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var R;\n        var G;\n        var B;\n        var RsRGB = rgb.r / 255;\n        var GsRGB = rgb.g / 255;\n        var BsRGB = rgb.b / 255;\n        if (RsRGB <= 0.03928) {\n            R = RsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (GsRGB <= 0.03928) {\n            G = GsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (BsRGB <= 0.03928) {\n            B = BsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    };\n    /**\n     * Returns the alpha value of a color, from 0-1.\n     */\n    TinyColor.prototype.getAlpha = function () {\n        return this.a;\n    };\n    /**\n     * Sets the alpha value on the current color.\n     *\n     * @param alpha - The new alpha value. The accepted range is 0-1.\n     */\n    TinyColor.prototype.setAlpha = function (alpha) {\n        this.a = (0, util_1.boundAlpha)(alpha);\n        this.roundA = Math.round(100 * this.a) / 100;\n        return this;\n    };\n    /**\n     * Returns whether the color is monochrome.\n     */\n    TinyColor.prototype.isMonochrome = function () {\n        var s = this.toHsl().s;\n        return s === 0;\n    };\n    /**\n     * Returns the object as a HSVA object.\n     */\n    TinyColor.prototype.toHsv = function () {\n        var hsv = (0, conversion_1.rgbToHsv)(this.r, this.g, this.b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\n    };\n    /**\n     * Returns the hsva values interpolated into a string with the following format:\n     * \"hsva(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHsvString = function () {\n        var hsv = (0, conversion_1.rgbToHsv)(this.r, this.g, this.b);\n        var h = Math.round(hsv.h * 360);\n        var s = Math.round(hsv.s * 100);\n        var v = Math.round(hsv.v * 100);\n        return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a HSLA object.\n     */\n    TinyColor.prototype.toHsl = function () {\n        var hsl = (0, conversion_1.rgbToHsl)(this.r, this.g, this.b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\n    };\n    /**\n     * Returns the hsla values interpolated into a string with the following format:\n     * \"hsla(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHslString = function () {\n        var hsl = (0, conversion_1.rgbToHsl)(this.r, this.g, this.b);\n        var h = Math.round(hsl.h * 360);\n        var s = Math.round(hsl.s * 100);\n        var l = Math.round(hsl.l * 100);\n        return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the hex value of the color.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHex = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return (0, conversion_1.rgbToHex)(this.r, this.g, this.b, allow3Char);\n    };\n    /**\n     * Returns the hex value of the color -with a # prefixed.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHexString = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return '#' + this.toHex(allow3Char);\n    };\n    /**\n     * Returns the hex 8 value of the color.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8 = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return (0, conversion_1.rgbaToHex)(this.r, this.g, this.b, this.a, allow4Char);\n    };\n    /**\n     * Returns the hex 8 value of the color -with a # prefixed.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8String = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return '#' + this.toHex8(allow4Char);\n    };\n    /**\n     * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.\n     * @param allowShortChar will shorten hex value to 3 or 4 char if possible\n     */\n    TinyColor.prototype.toHexShortString = function (allowShortChar) {\n        if (allowShortChar === void 0) { allowShortChar = false; }\n        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toRgb = function () {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA values interpolated into a string with the following format:\n     * \"RGBA(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toRgbString = function () {\n        var r = Math.round(this.r);\n        var g = Math.round(this.g);\n        var b = Math.round(this.b);\n        return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toPercentageRgb = function () {\n        var fmt = function (x) { return \"\".concat(Math.round((0, util_1.bound01)(x, 255) * 100), \"%\"); };\n        return {\n            r: fmt(this.r),\n            g: fmt(this.g),\n            b: fmt(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA relative values interpolated into a string\n     */\n    TinyColor.prototype.toPercentageRgbString = function () {\n        var rnd = function (x) { return Math.round((0, util_1.bound01)(x, 255) * 100); };\n        return this.a === 1\n            ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\")\n            : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * The 'real' name of the color -if there is one.\n     */\n    TinyColor.prototype.toName = function () {\n        if (this.a === 0) {\n            return 'transparent';\n        }\n        if (this.a < 1) {\n            return false;\n        }\n        var hex = '#' + (0, conversion_1.rgbToHex)(this.r, this.g, this.b, false);\n        for (var _i = 0, _a = Object.entries(css_color_names_1.names); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (hex === value) {\n                return key;\n            }\n        }\n        return false;\n    };\n    TinyColor.prototype.toString = function (format) {\n        var formatSet = Boolean(format);\n        format = format !== null && format !== void 0 ? format : this.format;\n        var formattedString = false;\n        var hasAlpha = this.a < 1 && this.a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === 'name' && this.a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === 'rgb') {\n            formattedString = this.toRgbString();\n        }\n        if (format === 'prgb') {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === 'hex' || format === 'hex6') {\n            formattedString = this.toHexString();\n        }\n        if (format === 'hex3') {\n            formattedString = this.toHexString(true);\n        }\n        if (format === 'hex4') {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === 'hex8') {\n            formattedString = this.toHex8String();\n        }\n        if (format === 'name') {\n            formattedString = this.toName();\n        }\n        if (format === 'hsl') {\n            formattedString = this.toHslString();\n        }\n        if (format === 'hsv') {\n            formattedString = this.toHsvString();\n        }\n        return formattedString || this.toHexString();\n    };\n    TinyColor.prototype.toNumber = function () {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    };\n    TinyColor.prototype.clone = function () {\n        return new TinyColor(this.toString());\n    };\n    /**\n     * Lighten the color a given amount. Providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.lighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l += amount / 100;\n        hsl.l = (0, util_1.clamp01)(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Brighten the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.brighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var rgb = this.toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return new TinyColor(rgb);\n    };\n    /**\n     * Darken the color a given amount, from 0 to 100.\n     * Providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.darken = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = (0, util_1.clamp01)(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.tint = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('white', amount);\n    };\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.shade = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('black', amount);\n    };\n    /**\n     * Desaturate the color a given amount, from 0 to 100.\n     * Providing 100 will is the same as calling greyscale\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.desaturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = (0, util_1.clamp01)(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Saturate the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.saturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s += amount / 100;\n        hsl.s = (0, util_1.clamp01)(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Completely desaturates a color into greyscale.\n     * Same as calling `desaturate(100)`\n     */\n    TinyColor.prototype.greyscale = function () {\n        return this.desaturate(100);\n    };\n    /**\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n     * Values outside of this range will be wrapped into this range.\n     */\n    TinyColor.prototype.spin = function (amount) {\n        var hsl = this.toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */\n    TinyColor.prototype.mix = function (color, amount) {\n        if (amount === void 0) { amount = 50; }\n        var rgb1 = this.toRgb();\n        var rgb2 = new TinyColor(color).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\n        };\n        return new TinyColor(rgba);\n    };\n    TinyColor.prototype.analogous = function (results, slices) {\n        if (results === void 0) { results = 6; }\n        if (slices === void 0) { slices = 30; }\n        var hsl = this.toHsl();\n        var part = 360 / slices;\n        var ret = [this];\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(new TinyColor(hsl));\n        }\n        return ret;\n    };\n    /**\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n     */\n    TinyColor.prototype.complement = function () {\n        var hsl = this.toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return new TinyColor(hsl);\n    };\n    TinyColor.prototype.monochromatic = function (results) {\n        if (results === void 0) { results = 6; }\n        var hsv = this.toHsv();\n        var h = hsv.h;\n        var s = hsv.s;\n        var v = hsv.v;\n        var res = [];\n        var modification = 1 / results;\n        while (results--) {\n            res.push(new TinyColor({ h: h, s: s, v: v }));\n            v = (v + modification) % 1;\n        }\n        return res;\n    };\n    TinyColor.prototype.splitcomplement = function () {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        return [\n            this,\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n        ];\n    };\n    /**\n     * Compute how the color would appear on a background\n     */\n    TinyColor.prototype.onBackground = function (background) {\n        var fg = this.toRgb();\n        var bg = new TinyColor(background).toRgb();\n        var alpha = fg.a + bg.a * (1 - fg.a);\n        return new TinyColor({\n            r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,\n            g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,\n            b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,\n            a: alpha,\n        });\n    };\n    /**\n     * Alias for `polyad(3)`\n     */\n    TinyColor.prototype.triad = function () {\n        return this.polyad(3);\n    };\n    /**\n     * Alias for `polyad(4)`\n     */\n    TinyColor.prototype.tetrad = function () {\n        return this.polyad(4);\n    };\n    /**\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n     */\n    TinyColor.prototype.polyad = function (n) {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        var result = [this];\n        var increment = 360 / n;\n        for (var i = 1; i < n; i++) {\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\n        }\n        return result;\n    };\n    /**\n     * compare color vs current color\n     */\n    TinyColor.prototype.equals = function (color) {\n        return this.toRgbString() === new TinyColor(color).toRgbString();\n    };\n    return TinyColor;\n}());\nexports.TinyColor = TinyColor;\n// kept for backwards compatability with v1\nfunction tinycolor(color, opts) {\n    if (color === void 0) { color = ''; }\n    if (opts === void 0) { opts = {}; }\n    return new TinyColor(color, opts);\n}\nexports.tinycolor = tinycolor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}